using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Diagnostics;
using Microsoft.AspNetCore.Http;
using System;
using System.Globalization;

namespace PersonalSite.Middleware
{
    /// <summary>
    /// Extension method to re-execute a request wuth a different path if the response depending onnstatus code.
    /// </summary>
    public static class StatusCodePagesExtensions
    {
        /// <summary>
        /// Adds a StatusCodePages middleware to the request pipeline. Specifies that the response body should be generated by 
        /// re-executing the request pipeline using an alternate path, if the response matches the specified <paramref name="statusCode"/>.
        /// </summary>
        /// <param name="app"></param>
        /// <param name="path">The request path to execute if the response satus code matches the <paramref name="statusCode" /> specified.</param>
        /// <param name="statusCode">Only re-execute the request if the repsonse status code matches the specified status code.</param>
        /// <returns></returns>
        public static IApplicationBuilder UseStatusCodePagesWithReExecute(this IApplicationBuilder app, string path, int statusCode)
        {
            return app.UseStatusCodePages(async context =>
            {
                if (context.HttpContext.Response.StatusCode != statusCode)
                    return;

                var newPath = new PathString(path);

                var originalPath = context.HttpContext.Request.Path;
                // Store the original paths so the app can check it.
                context.HttpContext.Features.Set<IStatusCodeReExecuteFeature>(new StatusCodeReExecuteFeature()
                {
                    OriginalPathBase = context.HttpContext.Request.PathBase.Value,
                    OriginalPath = originalPath.Value,
                });

                context.HttpContext.Request.Path = newPath;
                try
                {
                    await context.Next(context.HttpContext);
                }
                finally
                {
                    context.HttpContext.Request.Path = originalPath;
                    context.HttpContext.Features.Set<IStatusCodeReExecuteFeature>(null);
                }
            });
        }
    }
}
